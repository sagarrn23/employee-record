{"version":3,"sources":["components/Layout/Nav/Nav.module.css","containers/Employees/Employees.module.css","components/Layout/Layout.module.css","components/Layout/Employee/Employee.module.css","components/Layout/Nav/Nav.js","hoc/Aux/Aux.js","components/Layout/Employee/Map/Map.js","components/Layout/Employee/Employee.js","containers/Employees/Employees.js","components/Layout/Layout.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Nav","props","className","classes","nav","href","aux","children","GoogleApiWrapper","apiKey","Aux","google","zoom","style","width","height","initialCenter","coords","disableDefaultUI","draggable","position","Employee","card","userInfo","emp","name","username","email","address","street","suite","city","zipcode","phone","company","map","geo","handler","icon","faEdit","onClick","faTrash","EmployeeList","deleteHandler","index","state","empData","axios","get","then","response","setState","data","listWrap","this","key","id","delete","Component","Layout","container","wrapper","content","ERM","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9b008ca2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Nav_nav__-9LnW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"listWrap\":\"Employees_listWrap__-pKEM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Layout_container__1nNA4\",\"wrapper\":\"Layout_wrapper__267cj\",\"nav\":\"Layout_nav__e7Z21\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Employee_card__3U2AR\",\"userInfo\":\"Employee_userInfo__2eYwo\",\"map\":\"Employee_map__2smgo\",\"handler\":\"Employee_handler__2IGKl\"};","import React from 'react';\nimport classes from './Nav.module.css';\n\nconst Nav = (props) => {\n    return(\n        <nav className={classes.nav}>\n            <ul>\n                <li>\n                    <a href='/'>Home</a>\n                </li>\n                                <li>\n                    <a href='/'>Add New</a>\n                </li>\n            </ul>\n        </nav>\n    )\n}\n\nexport default Nav;","const aux = (props) => props.children;\n\nexport default aux;","import React from 'react';\nimport { Map, GoogleApiWrapper, Marker } from 'google-maps-react';\nimport Aux from '../../../../hoc/Aux/Aux';\n\nconst EmpLocation = (props) => {\n    const style = {\n        width: '100%',\n        height: '100%'\n    }\n    return (\n        <Aux>\n            <Map\n                google={props.google}\n                zoom={2}\n                style={style}\n                initialCenter={props.coords}\n                disableDefaultUI={true}\n                draggable={false}\n            >\n                <Marker position={props.coords} />\n            </Map>\n        </Aux>\n    )\n}\n\nexport default GoogleApiWrapper({\n  apiKey: 'AIzaSyDFZIT6v7Zhc1gDaselOkkKv72umRfe6p4'\n})(EmpLocation);","import React from 'react';\nimport classes from './Employee.module.css';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faEdit, faTrash } from \"@fortawesome/free-solid-svg-icons\";\nimport EmpLocation from './Map/Map';\n\nconst Employee = (props) => {\n    return(\n        <li className={classes.card}>\n            <div className={classes.userInfo}>\n                <p><strong>Name:</strong> {props.emp.name}</p>\n                <p><strong>Username:</strong> {props.emp.username}</p>\n                <p><strong>Email:</strong> {props.emp.email}</p>\n                <address>\n                    <strong>Address: </strong> \n                    {props.emp.address.street},\n                    {props.emp.address.suite},\n                    {props.emp.address.city},\n                    {props.emp.address.zipcode}\n                </address>\n                <p><strong>Phone:</strong> {props.emp.phone}</p>\n                <p><strong>Website:</strong> <a href={props.emp.email}>{props.emp.email}</a></p>\n                <p><strong>Company:</strong> {props.emp.company.name}</p>\n                \n            </div>\n\n            <div className={classes.map}>\n                <EmpLocation coords={props.emp.address.geo} />\n            </div>\n            <div className={classes.handler}>\n                <span>\n                    <FontAwesomeIcon icon={faEdit} />\n                </span>\n                <span>\n                    <FontAwesomeIcon onClick=\"\" icon={faTrash} />\n                </span>\n            </div>\n        </li>\n    )\n}\n\nexport default Employee;\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport Employee from '../../components/Layout/Employee/Employee';\nimport classes from './Employees.module.css';\n\nclass EmployeeList extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            empData: []\n        }\n    }\n\n    componentDidMount() {\n        axios.get(\"https://jsonplaceholder.typicode.com/users\")\n            .then(response => {\n                this.setState({\n                    empData: response.data\n                })\n            });\n\n    }\n\n    deleteHandler = (index) => {\n        const employees = [...this.state.empData];\n        \n    }\n\n    render() {\n        return (\n            <ul className={classes.listWrap}>\n                {this.state.empData.map((data, index) => {\n                    return <Employee \n                                key={data.id} \n                                emp={data} \n                                delete={() => this.deleteHandler(index)}\n                            />\n                })}\n            </ul>\n        )\n    }\n}\n\nexport default EmployeeList;\n","import React from 'react';\nimport classes from './Layout.module.css';\nimport Nav from './Nav/Nav';\nimport EmployeeList from \"../../containers/Employees/Employees\";\n\nconst Layout = () => {\n    return(\n        <div className={classes.container}>\n            <header className={classes.nav}>\n                <Nav />\n            </header>\n            <main className={classes.wrapper}>\n                <ul className={classes.content}>\n                    <EmployeeList />\n                </ul>\n            </main>\n        </div>\n    )\n}\n\nexport default Layout;","import React, {Component} from 'react';\nimport './App.module.css';\nimport Layout from './components/Layout/Layout';\n\nclass ERM extends Component {\n  render() {\n    return <Layout/>\n  }\n}\n\nexport default ERM;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './global.css';\nimport ERM from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ERM />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}